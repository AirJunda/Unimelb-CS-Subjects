Important:
    Binary search tree
    Quick sort
    
    Eq, Ord, Num, Show, Enum    ---->   type class
    Int, Char, [Bool]           ---->   type
    
    type definition:
        Enum type   ---->   data <TypeName> = <DataConstructorName1> | ⋯ | <DataConstructorNameN>
        Normal type ---->   data <Type> = <Constructor> <Type1> ⋯ <TypeN>
                                where the type of the data constructor is
                                <Constructor> :: <Type1> -> ⋯ -> <TypeN> -> <Type>


Question 1. Type

Variable & Function         Type
3                           Num a => a
"abc" ++ "def"              [Char]
(+)                         NUm a => a -> a -> a
[]                          [a]
(++)                        [a] -> [a] -> [a]
!   show                        Show a => a -> String
(. length)                  (Int -> a) -> [b] -> a
(.)                         (b -> c) -> (a -> b) -> a -> c
(:)                         a -> [a] -> [a]
map length                  [[a]] -> [Int]
length : "xyz"              type error
[1, 2, 3]                   Num a => [a]
(<)                         Ord a => a -> a -> Bool
map (+3)                    Num a => [a] -> [a]
foldl                       (a -> b -> a) -> a -> [b] -> a
foldr                       (a -> b -> b) -> b -> [a] -> b
Nothing                     Maybe a
zip [True,True,False]       [a] -> [(Bool,a)]
zip                         [a] -> [b] -> [(a,b)]
flip                        (a -> b -> c) -> b -> a -> c 
concatMap                   (a -> [b]) -> [a] -> [b]
$                           (a -> b) -> a -> b
Just                        a -> Maybe a
foldl (++)                  [a] -> [[a]] -> [a]
!   const                       a -> b -> a
((+).const 1)               Num a => b -> a -> a
()                          ()
>>=                         Monad m => m a -> (a -> m b) m b
!   >>                          Monad m => m a -> m b -> m b
return                      Monad m => a -> m a
getChar                     IO Char
putstrLn                    String -> IO ()
!   print                       Show a => a -> IO ()



Qeustion 4 : Coding

1) *
type HTML = [HTML_element]
data HTML_element
    = HTML_text String
    | HTML_font Font_tag HTML
    | HTML_p HTML
    | HTML_ul [HTML]
    | HTML_ol [HTML]
    data Font_tag = ...
write a Haskell function
strip_font_tags :: HTML -> HTML
which removes all font tags (replacing them with their HTML contents).

Answer:
-- removes all font tags (replacing them with their HTML contents).
strip_font_tags :: HTML -> HTML
strip_font_tags [] = []
strip_font_tags (HTML_text str:rest) =
  HTML_text str:strip_font_tags rest
strip_font_tags (HTML_font _ body:rest) =
  strip_font_tags body ++ strip_font_tags rest
strip_font_tags (HTML_p body:rest) =
  HTML_p (strip_font_tags body):strip_font_tags rest
strip_font_tags (HTML_ul bodies:rest) =
  HTML_ul (map strip_font_tags bodies):strip_font_tags rest
strip_font_tags (HTML_ol bodies:rest) =
  HTML_ol (map strip_font_tags bodies):strip_font_tags rest



2) ***
Multi-way trees, trees in which a node may have an arbitrary number of children, can be repre-
sented by a type like this, which puts all the children of a node into a list:
    data Mtree a = Mnode a [Mtree a]
Write a function
    showMtree :: Show a => Mtree a -> String
which returns a multi-line string depicting an Mtree. Each node should be placed on a separate line. You can include \n in the string for a newline. The children of a node should be placed on subsequent lines, indented by one more space than the line giving the value in the node. For example, given the tree
    Mnode 1 [Mnode 2 [], Mnode 3 [Mnode 4 []]]
the output string should be
    1 
     2
     3 
      4

Answer:
showMtree::Show a => Mtree a -> String
showMtree a = showMtree' a ""
showMtree'::Show a => Mtree a -> String -> String
showMtree' (Mnode node subtrees) indent = indent ++ show node ++ '\n' ++ concatMap (showMtree' (' ':indent)) subtrees



3)
-- Given the following binary search tree (BST) data type
data Tree a = Empty | Node (Tree a) a (Tree a)
    deriving Show  -- I added this for testing
-- write a Haskell function \texttt{insert} to insert an element into a tree.
-- Recall that in a BST, every element appearing in the first (left) subtree
-- of a node must be smaller than the element of that node, and every element
-- in the second (right) subtree must be larger.
-- Note that this tree type does not have values, just keys. Include a type
-- declaration for your \texttt{insert} function.
-- You may use any function in the Haskell prelude, but not functions
-- defined in libraries.

Answer:
insert :: Ord a => a -> Tree a -> Tree a
insert a Empty = Node Empty a Empty
insert a (Node left b right)
  | a == b    = Node left b right
  | a <  b    = Node (insert a left) b right
  | otherwise = Node left b (insert a right)


QUESTION 3
Write a Haskell function which takes a list of numbers and returns
a triple containing the length, the sum of the numbers, and the sum of the 
squares of the numbers. Try coding this with (1) three separate traversals
of the list and (2) a single traversal of the list.

ANSWER
The three-pass version is simple. We use the length and sum functions
from the Prelude (you can also easily define your own versions).

>stats1 ns =
>   (length ns, 
>    sum ns, 
>    sumsq ns
>   )   

>sumsq [] = 0 
>sumsq (n:ns) = n*n + sumsq ns

The single pass version uses pattern matching in a let expression
to extract the three numbers from the result of the recursive call.

>stats2 [] = (0,0,0)
>stats2 (n:ns) =
>   let (l,s,sq) = stats2 ns
>   in (l+1, s+n, sq+n*n)

QUESTION 3

Revise the definition from the previous question not to use append/3
to construct the list.  That is, ensure the cost of the operation is
proportional to the number of elements in the tree.

Hint:  look at the approach taken to write a tail recursive reverse
predicate for inspiration.

ANSWER

tree_list(Tree, List) :-
    tree_list(Tree, List, []).

tree_list(empty, List, List).
tree_list(node(Left,Elt,Right), List, List0) :-
    tree_list(Left, List, List1),
    List1 = [Elt|List2],
    tree_list(Right, List2, List0).
