Important:
    Binary search tree
    Quick sort


Question 1. Type

Variable & Function         Type
3                           Num a => a
"abc" ++ "def"              [Char]
(+)                         NUm a => a -> a -> a
[]                          [a]
(++)                        [a] -> [a] -> [a]
show                        Show a => a -> String
(. length)                  (Int -> a) -> [b] -> a
(.)                         (b -> c) -> (a -> b) -> a -> c
(:)                         a -> [a] -> [a]
map length                  [[a]] -> [Int]
length : "xyz"              type error
[1, 2, 3]                   Num a => [a]
(<)                         Ord a => a -> a -> Bool
map (+3)                    Num a => [a] -> [a]
foldl                       (a -> b -> a) -> a -> [b] -> a
foldr                       (a -> b -> b) -> b -> [a] -> b
Nothing                     Maybe a
zip [True,True,False]       [a] -> [(Bool,a)]
zip                         [a] -> [b] -> [(a,b)]
flip filter "hello"         ?



Question 2: Give value or type error reason

Expression                                                          Answer
map (length < 3) [[1],[1,2,3]]                                      ? 
filter (not.(==3)) [1,2,3]                                          [1,2]
let a = head [] in 3                                                exception, rmpty list has no head
map fst $ filter snd $ zip "abcde" [True,True,False,True]           "abd"
head $ sort $ zip [3,0,0,2,0] $ reverse [9,0,0,4,8]                 (0,0)
map snd $ sort $ zip "decl" [1..]                                   "3124"


Question 3: Write one sentence comment

1)
q2 _ _ [] = []
q2 a b (c:cs) =
    if a == c then b:(q2 a b cs)
            else c:(q2 a b cs)
-- replace a by b in the list.

2)
q3 a (b:[]) = a b
q3 a (b1:b2:bs) = q3 a (b2:bs)

-- apply functin a to the last element in the list 

3)
q2 _ [] = 0
q2 a (b:bs) = c + q2 a bs
    where c = if a == b then 1 else 0
-- q2::Eq a => a -> [a] -> Int
-- count how many a in the list
-- q2 a lst returns the number of occurances of a in lst


Qeustion 4 : Coding

1) ***
type HTML = [HTML_element]
data HTML_element
    = HTML_text String
    | HTML_font Font_tag HTML
    | HTML_p HTML
    | HTML_ul [HTML]
    | HTML_ol [HTML]
    data Font_tag = ...
write a Haskell function
strip_font_tags :: HTML -> HTML
which removes all font tags (replacing them with their HTML contents).

Answer:
-- removes all font tags (replacing them with their HTML contents).
strip_font_tags :: HTML -> HTML
strip_font_tags [] = []
strip_font_tags (HTML_text str:rest) =
  HTML_text str:strip_font_tags rest
strip_font_tags (HTML_font _ body:rest) =
  strip_font_tags body ++ strip_font_tags rest
strip_font_tags (HTML_p body:rest) =
  HTML_p (strip_font_tags body):strip_font_tags rest
strip_font_tags (HTML_ul bodies:rest) =
  HTML_ul (map strip_font_tags bodies):strip_font_tags rest
strip_font_tags (HTML_ol bodies:rest) =
  HTML_ol (map strip_font_tags bodies):strip_font_tags rest



2) ***
Multi-way trees, trees in which a node may have an arbitrary number of children, can be repre-
sented by a type like this, which puts all the children of a node into a list:
    data Mtree a = Mnode a [Mtree a]
Write a function
    showMtree :: Show a => Mtree a -> String
which returns a multi-line string depicting an Mtree. Each node should be placed on a separate line. You can include \n in the string for a newline. The children of a node should be placed on subsequent lines, indented by one more space than the line giving the value in the node. For example, given the tree
    Mnode 1 [Mnode 2 [], Mnode 3 [Mnode 4 []]]
the output string should be
    1 
     2
     3 
      4

Answer:
showMtree::Show a => Mtree a -> String
showMtree a = showMtree' a ""
showMtree'::Show a => Mtree a -> String -> String
showMtree' (Mnode node subtrees) indent = indent ++ show node ++ '\n' ++ concatMap (showMtree' (' ':indent)) subtrees



3) ***
-- Given the following binary search tree (BST) data type
data Tree a = Empty | Node (Tree a) a (Tree a)
    deriving Show  -- I added this for testing
-- write a Haskell function \texttt{insert} to insert an element into a tree.
-- Recall that in a BST, every element appearing in the first (left) subtree
-- of a node must be smaller than the element of that node, and every element
-- in the second (right) subtree must be larger.
-- Note that this tree type does not have values, just keys. Include a type
-- declaration for your \texttt{insert} function.
-- You may use any function in the Haskell prelude, but not functions
-- defined in libraries.

Answer:
insert :: Ord a => a -> Tree a -> Tree a
insert a Empty = Node Empty a Empty
insert a (Node left b right)
  | a == b    = Node left b right
  | a <  b    = Node (insert a left) b right
  | otherwise = Node left b (insert a right)









